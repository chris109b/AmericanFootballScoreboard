#!/usr/bin/env python3

# Python standard library imports
import time
import sys
import subprocess
# Imports from external modules

# Internal modules import
from footballscoreboard import ZeroconfBrowser
from footballscoreboard import Core


class DisplayRunner:

    def __init__(self):
        self.__process = None

    def stop(self):
        if self.__process is not None:
            self.__process.terminate()
            self.__process = None

    def start(self, ip, port):
        display_uri = "http://{0}:{1}/display_american_football.html".format(ip, port)
        command = ["chromium-browser", "--app={0}".format(display_uri), "--start-fullscreen"]
        self.__process = subprocess.Popen(command)


class App:

    def __init__(self):
        # Actual network services
        self.__zeroconf_browser = None
        self.__master_service = None
        self.__display_runner = DisplayRunner()
        self.__is_running = True

    def start(self):
        self.__zeroconf_browser = ZeroconfBrowser(delegate=self)
        self.__zeroconf_browser.add_observer(self)
        self.__zeroconf_browser.start()
        self.run()

    def run(self):
        while self.__is_running:
            time.sleep(0.1)
        sys.exit(0)

    def stop(self):
        self.__zeroconf_browser.stop()
        self.__display_runner.stop()
        self.__is_running = False

    def log(self, message):
        print(message)

    def is_service_valid(self, info):
        properties = Core.decode(info.properties)
        try:
            if properties[Core.KEY_VENDOR_NAME] != Core.DESCRIPTION[Core.KEY_VENDOR_NAME]:
                raise KeyError
            if properties[Core.KEY_PRODUCT_NAME] != Core.DESCRIPTION[Core.KEY_PRODUCT_NAME]:
                raise KeyError
            if properties[Core.KEY_PRODUCT_VERSION] != Core.DESCRIPTION[Core.KEY_PRODUCT_VERSION]:
                raise KeyError
        except KeyError:
            return False
        else:
            return True

    def on_did_update_service_list(self, browser):
        service_list = browser.get_service_list()
        if len(service_list) == 0:
            self.__display_runner.stop()
        elif self.__master_service != service_list[0]:
            self.__display_runner.stop()
            self.__master_service = service_list[0]
            ipv4_address = '.'.join(map(str, self.__master_service.address))
            port = self.__master_service.port
            self.__display_runner.start(ipv4_address, port)

if __name__ == "__main__":
    app = App()
    try:
        app.start()
    except (KeyboardInterrupt, SystemExit):
        app.stop()
